{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.URL = 'http://localhost:3000';\n  }\n  searchMovie(title) {\n    let url = this.URL + `/search/` + title;\n    var ans = this.http.get(url);\n    return ans;\n  }\n  login(userName, password) {\n    let headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    console.log(\"loggin into \" + userName + \" wit pass \" + password);\n    return this.http.post(this.URL + \"/login\", \"userName=\" + userName + \"&password=\" + password, {\n      headers\n    });\n  }\n  update(user) {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return this.http.post(this.URL + \"/update\", user, {\n      headers\n    });\n  }\n  rewatch(movie, user) {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return this.http.post(this.URL + \"/rewatch/\" + movie.title, user, {\n      headers\n    });\n  }\n  users() {\n    return this.http.get(this.URL + \"/users\");\n  }\n  sort(filter, user) {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return this.http.post(this.URL + '/sort/' + filter, user, {\n      headers\n    });\n  }\n}\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n};\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,QAAG,GAAY,uBAAuB;EACP;EAEvCC,WAAW,CAACC,KAAc;IACxB,IAAIC,GAAG,GAAG,IAAI,CAACC,GAAG,GAAC,UAAU,GAACF,KAAK;IACnC,IAAIG,GAAG,GAAG,IAAI,CAACL,IAAI,CAACM,GAAG,CAAOH,GAAG,CAAC;IAClC,OAAOE,GAAG;EACZ;EAEAE,KAAK,CAAEC,QAAiB,EAAEC,QAAiB;IACzC,IAAIC,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmC,CAAC;IACpEC,OAAO,CAACC,GAAG,CAAC,cAAc,GAACJ,QAAQ,GAAC,YAAY,GAACC,QAAQ,CAAC;IAC1D,OAAO,IAAI,CAACT,IAAI,CAACa,IAAI,CAAO,IAAI,CAACT,GAAG,GAAG,QAAQ,EAAE,WAAW,GAAGI,QAAQ,GAAG,YAAY,GAAGC,QAAQ,EAAE;MAACC;IAAO,CAAC,CAAE;EAChH;EAEAI,MAAM,CAACC,IAAU;IACf,IAAIL,OAAO,GAAG;MAAE,cAAc,EAAE;IAAkB,CAAE;IACpD,OAAO,IAAI,CAACV,IAAI,CAACa,IAAI,CAAO,IAAI,CAACT,GAAG,GAAG,SAAS,EAAEW,IAAI,EAAE;MAAEL;IAAO,CAAE,CAAC;EACtE;EACAM,OAAO,CAACC,KAAW,EAACF,IAAS;IAC3B,IAAIL,OAAO,GAAI;MAAE,cAAc,EAAE;IAAkB,CAAE;IACrD,OAAO,IAAI,CAACV,IAAI,CAACa,IAAI,CAAO,IAAI,CAACT,GAAG,GAAG,WAAW,GAACa,KAAK,CAACf,KAAK,EAAEa,IAAI,EAAE;MAAEL;IAAO,CAAE,CAAC;EACpF;EACAQ,KAAK;IACH,OAAO,IAAI,CAAClB,IAAI,CAACM,GAAG,CAAS,IAAI,CAACF,GAAG,GAAC,QAAQ,CAAC;EACjD;EACAe,IAAI,CAACC,MAAa,EAAEL,IAAS;IAC3B,IAAIL,OAAO,GAAI;MAAE,cAAc,EAAE;IAAkB,CAAE;IACrD,OAAO,IAAI,CAACV,IAAI,CAACa,IAAI,CAAO,IAAI,CAACT,GAAG,GAAC,QAAQ,GAACgB,MAAM,EAACL,IAAI,EAAC;MAACL;IAAO,CAAC,CAAC;EACtE;;AA9BWZ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAuB,SAAZvB,YAAY;EAAAwB,YAFX;AAAM","names":["MovieService","constructor","http","searchMovie","title","url","URL","ans","get","login","userName","password","headers","console","log","post","update","user","rewatch","movie","users","sort","filter","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\asibi\\.vscode\\CS 402\\Final\\client\\src\\app\\services\\movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { movie } from '../models/movie';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n  private URL : String = 'http://localhost:3000';\n  constructor(private http: HttpClient) {}\n\n  searchMovie(title : string) : Observable<User>{\n    let url = this.URL+`/search/`+title;\n    var ans = this.http.get<User>(url);\n    return ans;\n  }\n\n  login( userName : String, password : String  ) : Observable<User> {\n    let headers = { \"Content-Type\": \"application/x-www-form-urlencoded\"};\n    console.log(\"loggin into \"+userName+\" wit pass \"+password);\n    return this.http.post<User>(this.URL + \"/login\", \"userName=\" + userName + \"&password=\" + password, {headers} );\n  }\n  \n  update(user: User): Observable<User> {\n    let headers = { \"Content-Type\": \"application/json\" };\n    return this.http.post<User>(this.URL + \"/update\", user, { headers });\n  }  \n  rewatch(movie:movie,user:User):Observable<User>{\n    let headers =  { \"Content-Type\": \"application/json\" };\n    return this.http.post<User>(this.URL + \"/rewatch/\"+movie.title, user, { headers });\n  }\n  users():Observable<[User]>{\n    return this.http.get<[User]>(this.URL+\"/users\")\n  }\n  sort(filter:string, user:User):Observable<User>{\n    let headers =  { \"Content-Type\": \"application/json\" };\n    return this.http.post<User>(this.URL+'/sort/'+filter,user,{headers});\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//Service handling server interaction\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.URL = 'http://localhost:3000';\n  }\n  search(title) {\n    let url = this.URL + '/search/' + title;\n    return this.http.get(url);\n  }\n  watchlistMovie(title) {\n    let url = this.URL + `/addWatchlist/` + title;\n    return this.http.get(url);\n  }\n  login(userName, password) {\n    console.log(\"logging into \" + userName + \" with pass \" + password);\n    let headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    return this.http.post(this.URL + \"/login\", \"userName=\" + userName + \"&password=\" + password, {\n      headers\n    });\n  }\n  update(user) {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return this.http.post(this.URL + \"/update\", user, {\n      headers\n    });\n  }\n  rewatch(movie, user) {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return this.http.post(this.URL + \"/rewatch/\" + movie.title, user, {\n      headers\n    });\n  }\n  users() {\n    return this.http.get(this.URL + \"/users\");\n  }\n  sort(filter, user) {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return this.http.post(this.URL + '/sort/' + filter, user, {\n      headers\n    });\n  }\n}\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n};\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA;AAKA,OAAM,MAAOA,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,QAAG,GAAY,uBAAuB;EACP;EAEvCC,MAAM,CAACC,KAAc;IACnB,IAAIC,GAAG,GAAG,IAAI,CAACC,GAAG,GAAC,UAAU,GAACF,KAAK;IACnC,OAAO,IAAI,CAACF,IAAI,CAACK,GAAG,CAAUF,GAAG,CAAC;EACpC;EAEAG,cAAc,CAACJ,KAAc;IAC3B,IAAIC,GAAG,GAAG,IAAI,CAACC,GAAG,GAAC,gBAAgB,GAACF,KAAK;IACzC,OAAO,IAAI,CAACF,IAAI,CAACK,GAAG,CAAOF,GAAG,CAAC;EACjC;EACAI,KAAK,CAAEC,QAAiB,EAAEC,QAAiB;IACzCC,OAAO,CAACC,GAAG,CAAC,eAAe,GAACH,QAAQ,GAAC,aAAa,GAACC,QAAQ,CAAC;IAE5D,IAAIG,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmC,CAAC;IACpE,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,IAAI,CAACT,GAAG,GAAG,QAAQ,EAAE,WAAW,GAAGI,QAAQ,GAAG,YAAY,GAAGC,QAAQ,EAAE;MAACG;IAAO,CAAC,CAAE;EAChH;EACAE,MAAM,CAACC,IAAU;IACf,IAAIH,OAAO,GAAG;MAAE,cAAc,EAAE;IAAkB,CAAE;IACpD,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,IAAI,CAACT,GAAG,GAAG,SAAS,EAAEW,IAAI,EAAE;MAAEH;IAAO,CAAE,CAAC;EACtE;EACAI,OAAO,CAACC,KAAW,EAACF,IAAS;IAC3B,IAAIH,OAAO,GAAI;MAAE,cAAc,EAAE;IAAkB,CAAE;IACrD,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,IAAI,CAACT,GAAG,GAAG,WAAW,GAACa,KAAK,CAACf,KAAK,EAAEa,IAAI,EAAE;MAAEH;IAAO,CAAE,CAAC;EACpF;EACAM,KAAK;IACH,OAAO,IAAI,CAAClB,IAAI,CAACK,GAAG,CAAS,IAAI,CAACD,GAAG,GAAC,QAAQ,CAAC;EACjD;EACAe,IAAI,CAACC,MAAa,EAAEL,IAAS;IAC3B,IAAIH,OAAO,GAAI;MAAE,cAAc,EAAE;IAAkB,CAAE;IACrD,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAO,IAAI,CAACT,GAAG,GAAC,QAAQ,GAACgB,MAAM,EAACL,IAAI,EAAC;MAACH;IAAO,CAAC,CAAC;EACtE;;AAjCWd,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAuB,SAAZvB,YAAY;EAAAwB,YAFX;AAAM","names":["MovieService","constructor","http","search","title","url","URL","get","watchlistMovie","login","userName","password","console","log","headers","post","update","user","rewatch","movie","users","sort","filter","factory","providedIn"],"sourceRoot":"","sources":["E:\\Code Things\\VSCode Files\\Watchlist-Website\\client\\src\\app\\services\\movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { movie } from '../models/movie';\r\nimport { user } from '../models/user';\r\nimport { observableToBeFn } from 'rxjs/internal/testing/TestScheduler';\r\n\r\n//Service handling server interaction\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MovieService {\r\n  private URL : String = 'http://localhost:3000';\r\n  constructor(private http: HttpClient) {}\r\n\r\n  search(title : string) : Observable<[movie]> {\r\n    let url = this.URL+'/search/'+title;\r\n    return this.http.get<[movie]>(url);\r\n  }\r\n\r\n  watchlistMovie(title : string) : Observable<user>{\r\n    let url = this.URL+`/addWatchlist/`+title;\r\n    return this.http.get<user>(url);\r\n  }\r\n  login( userName : String, password : String  ) : Observable<user> {\r\n    console.log(\"logging into \"+userName+\" with pass \"+password);\r\n\r\n    let headers = { \"Content-Type\": \"application/x-www-form-urlencoded\"};\r\n    return this.http.post<user>(this.URL + \"/login\", \"userName=\" + userName + \"&password=\" + password, {headers} );\r\n  }\r\n  update(user: user): Observable<user> {\r\n    let headers = { \"Content-Type\": \"application/json\" };\r\n    return this.http.post<user>(this.URL + \"/update\", user, { headers });\r\n  }  \r\n  rewatch(movie:movie,user:user):Observable<user>{\r\n    let headers =  { \"Content-Type\": \"application/json\" };\r\n    return this.http.post<user>(this.URL + \"/rewatch/\"+movie.title, user, { headers });\r\n  }\r\n  users():Observable<[user]>{\r\n    return this.http.get<[user]>(this.URL+\"/users\")\r\n  }\r\n  sort(filter:string, user:user):Observable<user>{\r\n    let headers =  { \"Content-Type\": \"application/json\" };\r\n    return this.http.post<user>(this.URL+'/sort/'+filter,user,{headers});\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}